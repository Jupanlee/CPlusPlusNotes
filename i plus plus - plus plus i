
### i++ 与 ++i 的区别

1. i++ 返回原来的值，++i 返回加1后的值

2. i++ 不能作为左值，而 ++i 可以

### 左值与右值的根本区别在于是否允许 取地址运算符& 获得对应的内存地址

##############################################################
### 测试代码 ###
### 1. i++ 返回原来的值，++i 返回加1后的值 ###
#include <iostream>
using namespace std;

int main()
{
   int b1, b2, a1 = 1, a2 = 1;
   b1 = a1++;
   b2 = ++a2;
   
   cout<<"b1: "<<b1<<endl;
   cout<<"b2: "<<b2<<endl;
}

### 运行结果 ###
b1: 1
b2: 2

##############################################################


##############################################################
### 测试代码 ###
### 2. i++ 不能作为左值，而 ++i 可以 ###

#include <iostream>
using namespace std;

int main()
{
   int i = 0;
   int *p1 = &(++i);
   int *p2 = &(i++);
   
   ++i = 1;
   i++ = 5;
  
}

运行结果：
Compilation Failed

/usercode/file.cpp: In function ‘int main()’:
/usercode/file.cpp:17:19: error: lvalue required as unary ‘&’ operand
    int *p2 = &(i++);
                   ^
/usercode/file.cpp:20:8: error: lvalue required as left operand of assignment
    i++ = 5;
        ^
##############################################################



##############################################################
### 为什么 i++ 不能作为左值，而 ++i 可以作为左值？###
1. 	i++ 的实现
	const int int::operator++()
	{
		int oldValue = *this;	
		++(*this);
		return OldValue;
	}
	
2. 	++i 的实现
	int & int::operator++()	//以引用形式返回，意味着返回值可以作为左值
	{
		*this += 1; // 加1
		return *this;
	}
##############################################################



##############################################################
### 为什么 for 循环中大多使用 ++i，更少使用 i++？###
我的理解：i++调用后缀形式函数，观察后缀形式函数可以发现，其中又调用了前缀形式函数。因此直接使用 ++i 更直接，可在一定程度上减少运算次数。即后缀形式运算效率更低

for (int j = 0; j < 10; ++j){
   cout<<j<<endl;
}
##############################################################
